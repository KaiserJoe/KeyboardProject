<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.0.1">

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by Vibrator.vibrate: android.permission.VIBRATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        sVibrateService.vibrate((long)(duration * 1000));"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="213"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="490"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="497"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="504"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="512"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="519"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="526"
            column="9"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        android:targetSdkVersion=&quot;23&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/AndroidManifest.xml"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility &#xA;modes apply. Consider testing and updating this version. &#xA;Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 23"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:support-v4:23.+)"
        category="Correctness"
        priority="4"
        summary="Gradle Dynamic Version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1="    compile &apos;com.android.support:support-v4:23.+&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/build.gradle"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `minSdkVersion` value (`16`) is not used; it is always overridden by the value specified in the Gradle build script (`16`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:minSdkVersion=&quot;16&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/AndroidManifest.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `targetSdkVersion` value (`23`) is not used; it is always overridden by the value specified in the Gradle build script (`23`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:targetSdkVersion=&quot;23&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/AndroidManifest.xml"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="TrulyRandom"
        severity="Warning"
        message="Potentially insecure random numbers on Android 4.3 and older. Read https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html for more info."
        category="Security"
        priority="9"
        summary="Weak RNG"
        explanation="Key generation, signing, encryption, and random number generation may not receive cryptographically strong values due to improper initialization of the underlying PRNG on Android 4.3 and below.&#xA;&#xA;If your application relies on cryptographically secure random number generation you should apply the workaround described in https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html .&#xA;&#xA;This lint rule is mostly informational; it does not accurately detect whether cryptographically secure RNG is required, or whether the workaround has already been applied. After reading the blog entry and updating your code if necessary, you can disable this lint issue."
        url="https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html"
        urls="https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html"
        errorLine1="                sslContext.init(null, new TrustManager[]{new SelfX509TrustManager()}, new SecureRandom());"
        errorLine2="                                                                                          ~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHttpURLConnection.java"
            line="75"
            column="91"/>
    </issue>

    <issue
        id="BadHostnameVerifier"
        severity="Warning"
        message="`verify` always returns `true`, which could cause insecure network traffic due to trusting TLS/SSL server certificates for wrong hostnames"
        category="Security"
        priority="6"
        summary="Insecure HostnameVerifier"
        explanation="This check looks for implementations of `HostnameVerifier` whose `verify` method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers."
        errorLine1="        public boolean verify(String hostname, SSLSession session) {"
        errorLine2="                       ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHttpURLConnection.java"
            line="431"
            column="24"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        errorLine1="        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHttpURLConnection.java"
            line="445"
            column="21"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkServerTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        errorLine1="        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHttpURLConnection.java"
            line="450"
            column="21"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="            final Handler handler = new Handler();"
        errorLine2="                                    ~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxActivity.java"
            line="77"
            column="37"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_centerInParent`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_centerInParent=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_centerInParent`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_centerInParent=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="42"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is never &lt; 16"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="            if(android.os.Build.VERSION.SDK_INT &lt; 11) {"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxAccelerometer.java"
            line="76"
            column="16"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="This folder configuration (`v11`) is unnecessary; `minSdkVersion` is 16. Merge all the resources in this folder into `values`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder.">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values-v11"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="This folder configuration (`v14`) is unnecessary; `minSdkVersion` is 16. Merge all the resources in this folder into `values`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder.">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values-v14"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Context sContext;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxBitmap.java"
            line="58"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `Cocos2dxMusic` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Cocos2dxMusic sCocos2dMusic;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="64"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `Cocos2dxSound` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Cocos2dxSound sCocos2dSound;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `Cocos2dxAccelerometer` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Cocos2dxAccelerometer sCocos2dxAccelerometer;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="67"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Activity sActivity = null;//modify by jamesliu private->public"
        errorLine2="           ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxHelper.java"
            line="72"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static FrameLayout sLayout;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxWebViewHelper.java"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="        Cocos2dxGLSurfaceView.sHandler = new Handler() {"
        errorLine2="                                         ^">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxGLSurfaceView.java"
            line="95"
            column="42"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler mSDKHandler = new Handler() {"
        errorLine2="                                  ^">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/com/bankeys/view/SDKAppActivity.java"
            line="25"
            column="35"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    Handler mTimerHandler = new Handler() {"
        errorLine2="                            ^">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/com/bankeys/view/SDKAppActivity.java"
            line="42"
            column="29"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `#f7f8fa` with a theme that also paints a background (inferred theme is `@style/AppTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;#f7f8fa&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.finder_mask` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;finder_mask&quot;>#60000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.rea` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;rea&quot;>#ffff0000&lt;/color>"
        errorLine2="           ~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.common_bg` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;common_bg&quot;>#f0eff4&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="8"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.blue` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;blue&quot;>#059cd4&lt;/color>"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="9"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.blue1` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;blue1&quot;>#66059cd4&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="10"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.gray` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;gray&quot;>#f8f8f8&lt;/color>"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="11"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.common_bg` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;drawable name=&quot;common_bg&quot;>#f0eff4&lt;/drawable>"
        errorLine2="              ~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="13"
            column="15"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.red_alpha_30` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;drawable name=&quot;red_alpha_30&quot;>#8d171e&lt;/drawable>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="14"
            column="15"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.login_regist_normal` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;drawable name=&quot;login_regist_normal&quot;>#DB4630&lt;/drawable>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="15"
            column="15"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.login_regist_pressed` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;drawable name=&quot;login_regist_pressed&quot;>#D78E87&lt;/drawable>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/values/color.xml"
            line="16"
            column="15"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.myqrview` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `Cocos2dxVideoView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:&#xA;* `View(Context context)`&#xA;* `View(Context context, AttributeSet attrs)`&#xA;* `View(Context context, AttributeSet attrs, int defStyle)`&#xA;&#xA;If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class Cocos2dxVideoView extends SurfaceView implements MediaPlayerControl {"
        errorLine2="             ~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxVideoView.java"
            line="42"
            column="14"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `Cocos2dxGLSurfaceView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(final MotionEvent pMotionEvent) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxGLSurfaceView.java"
            line="197"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `Cocos2dxVideoView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxVideoView.java"
            line="201"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;扫码&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;扫码&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;扫一扫上面的二维码图片&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;扫一扫上面的二维码图片&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;取消&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;取消&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/res/layout/myqrview.xml"
            line="43"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;"
        errorLine2="                                                     ~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxEditBox.java"
            line="129"
            column="54"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                lParams.gravity = Gravity.TOP | Gravity.LEFT;"
        errorLine2="                                                        ~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxEditBoxHelper.java"
            line="125"
            column="57"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        lParams.gravity = Gravity.TOP | Gravity.LEFT;"
        errorLine2="                                                ~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxVideoView.java"
            line="384"
            column="49"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;"
        errorLine2="                                                     ~~~~">
        <location
            file="/Users/Kingpin/Desktop/WorkSpace/GItSpace/PriteProject/KeyboardProject/Android_KeyboardCodeLib/Keyboard_AndroidLib/src/main/java/org/cocos2dx/lib/Cocos2dxWebView.java"
            line="94"
            column="54"/>
    </issue>

</issues>
